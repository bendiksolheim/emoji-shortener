-- Create table for storing allowed emojis
CREATE TABLE public.emoji (
	id int8 NOT NULL GENERATED BY DEFAULT AS IDENTITY,
	emoji text NOT NULL,
	CONSTRAINT emojis_pkey PRIMARY KEY (id)
);

---

-- Create table for storing shortened URLs with their redirects
CREATE TABLE public.redirect (
	id int8 NOT NULL GENERATED BY DEFAULT AS IDENTITY,
	url text NOT NULL,
	redirect text NOT NULL,
	CONSTRAINT redirect_pkey PRIMARY KEY (id)
);

---

-- Get a random number between low and high
create or replace function random_between(low int4, high int4) returns int4
language plpgsql
as
$$
begin
  return floor(random() * (high - low + 1) + low);
end;
$$;

---

-- Get a random emoji from the emoji table
create or replace function random_emoji() returns text
language plpgsql
as
$$
declare
  emoji_count int4;
  num int4;
begin
  select count(*) into emoji_count from emoji;
  select random_between(0, emoji_count - 1) into num;
  return (select emoji from emoji order by emoji.id limit 1 offset num);
end;
$$;

---

-- Generate a sequence of length len of random emojis
create or replace function emoji_sequence(len int4) returns text
language plpgsql
as
$$
begin
  return (array_to_string(array(select random_emoji() from generate_series(1, len)), ''));
end;
$$;

---

-- Insert a URL together with its unique emoji sequence into the redirect table
create or replace function shorten_url(long_url text) returns text
language plpgsql
as
$$
declare
  slug text;
begin
  -- just return redirect if URL already exists
  if (select count(*) from redirect where redirect.url = long_url) > 0 then
    return (select redirect from redirect where redirect.url = long_url);
  end if;

  -- else, generate new redirect
  select emoji_sequence(3) into slug;
  while (select count(*) from redirect where redirect.redirect = slug) > 0 loop
    select emoji_sequence(3) into slug;
  end loop;

  insert into redirect(url, redirect) values(long_url, slug);
  return slug;
end;
$$;
